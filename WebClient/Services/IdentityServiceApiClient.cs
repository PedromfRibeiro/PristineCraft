//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace WebClient.Services;

using Application.DTO.User;
using Application.Helper;
using Domain.Entities;
using Microsoft.AspNetCore.Identity;
using System = global::System;

[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class IdentityServiceApiClient
{
#pragma warning disable 8618
	private string _baseUrl;
#pragma warning restore 8618

	private System.Net.Http.HttpClient _httpClient;
	private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	public IdentityServiceApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	{
		BaseUrl = baseUrl;
		_httpClient = httpClient;
	}

	private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
	{
		var settings = new Newtonsoft.Json.JsonSerializerSettings();
		UpdateJsonSerializerSettings(settings);
		return settings;
	}

	public string BaseUrl
	{
		get { return _baseUrl; }
		set
		{
			_baseUrl = value;
			if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
				_baseUrl += '/';
		}
	}

	protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

	static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
	partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<LoginResponseDto> LoginAsync(LoginRequestDto body)
	{
		return LoginAsync(body, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<LoginResponseDto> LoginAsync(LoginRequestDto body, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
				var content_ = new System.Net.Http.StringContent(json_);
				content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Login"
				urlBuilder_.Append("api/Account/Login");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<LoginResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task LogoutAsync()
	{
		return LogoutAsync(System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task LogoutAsync(System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
				request_.Method = new System.Net.Http.HttpMethod("POST");

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Logout"
				urlBuilder_.Append("api/Account/Logout");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<RegisterResponseDTO> RegisterAsync(RegisterRequestDto body)
	{
		return RegisterAsync(body, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<RegisterResponseDTO> RegisterAsync(RegisterRequestDto body, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
				var content_ = new System.Net.Http.StringContent(json_);
				content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Register"
				urlBuilder_.Append("api/Account/Register");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<RegisterResponseDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<User> FetchAsync(string email)
	{
		return FetchAsync(email, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<User> FetchAsync(string email, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Method = new System.Net.Http.HttpMethod("GET");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Fetch"
				urlBuilder_.Append("api/Account/Fetch");
				urlBuilder_.Append('?');
				if (email != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FetchesAsync(int? pageSize, int? _pageNumber, System.Collections.Generic.IEnumerable<string> inputOptions, System.Collections.Generic.IEnumerable<FilterOptions> filterOptions2)
	{
		return FetchesAsync(pageSize, _pageNumber, inputOptions, filterOptions2, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FetchesAsync(int? pageSize, int? _pageNumber, System.Collections.Generic.IEnumerable<string> inputOptions, System.Collections.Generic.IEnumerable<FilterOptions> filterOptions2, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Method = new System.Net.Http.HttpMethod("GET");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Fetches"
				urlBuilder_.Append("api/Account/Fetches");
				urlBuilder_.Append('?');
				if (pageSize != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				if (_pageNumber != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("_pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				if (inputOptions != null)
				{
					foreach (var item_ in inputOptions) { urlBuilder_.Append(System.Uri.EscapeDataString("inputOptions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
				}
				if (filterOptions2 != null)
				{
					foreach (var item_ in filterOptions2) { urlBuilder_.Append(System.Uri.EscapeDataString("FilterOptions2")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<User>>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<bool> UpdateAsync(UpdateUserRequestDto body)
	{
		return UpdateAsync(body, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<bool> UpdateAsync(UpdateUserRequestDto body, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
				var content_ = new System.Net.Http.StringContent(json_);
				content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new System.Net.Http.HttpMethod("PUT");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Update"
				urlBuilder_.Append("api/Account/Update");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<bool> DeleteAsync(string email)
	{
		return DeleteAsync(email, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<bool> DeleteAsync(string email, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Method = new System.Net.Http.HttpMethod("DELETE");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/Delete"
				urlBuilder_.Append("api/Account/Delete");
				urlBuilder_.Append('?');
				if (email != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<TfaSetupDto> TwoFactorAuthSetupAsync(string email)
	{
		return TwoFactorAuthSetupAsync(email, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<TfaSetupDto> TwoFactorAuthSetupAsync(string email, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/TwoFactorAuthSetup"
				urlBuilder_.Append("api/Account/TwoFactorAuthSetup");
				urlBuilder_.Append('?');
				if (email != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<TfaSetupDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<TfaSetupDto> PostTfaSetupAsync(TfaSetupDto body)
	{
		return PostTfaSetupAsync(body, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<TfaSetupDto> PostTfaSetupAsync(TfaSetupDto body, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
				var content_ = new System.Net.Http.StringContent(json_);
				content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/PostTfaSetup"
				urlBuilder_.Append("api/Account/PostTfaSetup");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<TfaSetupDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	protected struct ObjectResponseResult<T>
	{
		public ObjectResponseResult(T responseObject, string responseText)
		{
			this.Object = responseObject;
			this.Text = responseText;
		}

		public T Object { get; }

		public string Text { get; }
	}

	public bool ReadResponseAsString { get; set; }

	protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
	{
		if (response == null || response.Content == null)
		{
			return new ObjectResponseResult<T>(default(T), string.Empty);
		}

		if (ReadResponseAsString)
		{
			var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
			try
			{
				var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
				return new ObjectResponseResult<T>(typedBody, responseText);
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
			}
		}
		else
		{
			try
			{
				using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
				using (var streamReader = new System.IO.StreamReader(responseStream))
				using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
				{
					var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
					var typedBody = serializer.Deserialize<T>(jsonTextReader);
					return new ObjectResponseResult<T>(typedBody, string.Empty);
				}
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
			}
		}
	}

	private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
	{
		if (value == null)
		{
			return "";
		}

		if (value is System.Enum)
		{
			var name = System.Enum.GetName(value.GetType(), value);
			if (name != null)
			{
				var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
				if (field != null)
				{
					var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
						as System.Runtime.Serialization.EnumMemberAttribute;
					if (attribute != null)
					{
						return attribute.Value != null ? attribute.Value : name;
					}
				}

				var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
				return converted == null ? string.Empty : converted;
			}
		}
		else if (value is bool)
		{
			return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
		}
		else if (value is byte[])
		{
			return System.Convert.ToBase64String((byte[])value);
		}
		else if (value is string[])
		{
			return string.Join(",", (string[])value);
		}
		else if (value.GetType().IsArray)
		{
			var valueArray = (System.Array)value;
			var valueTextArray = new string[valueArray.Length];
			for (var i = 0; i < valueArray.Length; i++)
			{
				valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
			}
			return string.Join(",", valueTextArray);
		}

		var result = System.Convert.ToString(value, cultureInfo);
		return result == null ? "" : result;
	}
}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AccountRoleClient
{
#pragma warning disable 8618
	private string _baseUrl;
#pragma warning restore 8618

	private System.Net.Http.HttpClient _httpClient;
	private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	public AccountRoleClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	{
		BaseUrl = baseUrl;
		_httpClient = httpClient;
	}

	private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
	{
		var settings = new Newtonsoft.Json.JsonSerializerSettings();
		UpdateJsonSerializerSettings(settings);
		return settings;
	}

	public string BaseUrl
	{
		get { return _baseUrl; }
		set
		{
			_baseUrl = value;
			if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
				_baseUrl += '/';
		}
	}

	protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

	static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
	partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<IdentityResult> AddAsync(string email, string role)
	{
		return AddAsync(email, role, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<IdentityResult> AddAsync(string email, string role, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountRole_Add"
				urlBuilder_.Append("api/Account/AccountRole_Add");
				urlBuilder_.Append('?');
				if (email != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				if (role != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<IdentityResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<IdentityResult> RemoveAsync(string email, string role)
	{
		return RemoveAsync(email, role, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<IdentityResult> RemoveAsync(string email, string role, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountRole_Remove"
				urlBuilder_.Append("api/Account/AccountRole_Remove");
				urlBuilder_.Append('?');
				if (email != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				if (role != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<IdentityResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	protected struct ObjectResponseResult<T>
	{
		public ObjectResponseResult(T responseObject, string responseText)
		{
			this.Object = responseObject;
			this.Text = responseText;
		}

		public T Object { get; }

		public string Text { get; }
	}

	public bool ReadResponseAsString { get; set; }

	protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
	{
		if (response == null || response.Content == null)
		{
			return new ObjectResponseResult<T>(default(T), string.Empty);
		}

		if (ReadResponseAsString)
		{
			var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
			try
			{
				var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
				return new ObjectResponseResult<T>(typedBody, responseText);
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
			}
		}
		else
		{
			try
			{
				using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
				using (var streamReader = new System.IO.StreamReader(responseStream))
				using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
				{
					var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
					var typedBody = serializer.Deserialize<T>(jsonTextReader);
					return new ObjectResponseResult<T>(typedBody, string.Empty);
				}
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
			}
		}
	}

	private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
	{
		if (value == null)
		{
			return "";
		}

		if (value is System.Enum)
		{
			var name = System.Enum.GetName(value.GetType(), value);
			if (name != null)
			{
				var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
				if (field != null)
				{
					var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
						as System.Runtime.Serialization.EnumMemberAttribute;
					if (attribute != null)
					{
						return attribute.Value != null ? attribute.Value : name;
					}
				}

				var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
				return converted == null ? string.Empty : converted;
			}
		}
		else if (value is bool)
		{
			return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
		}
		else if (value is byte[])
		{
			return System.Convert.ToBase64String((byte[])value);
		}
		else if (value is string[])
		{
			return string.Join(",", (string[])value);
		}
		else if (value.GetType().IsArray)
		{
			var valueArray = (System.Array)value;
			var valueTextArray = new string[valueArray.Length];
			for (var i = 0; i < valueArray.Length; i++)
			{
				valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
			}
			return string.Join(",", valueTextArray);
		}

		var result = System.Convert.ToString(value, cultureInfo);
		return result == null ? "" : result;
	}
}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AccountPhoneClient
{
#pragma warning disable 8618
	private string _baseUrl;
#pragma warning restore 8618

	private System.Net.Http.HttpClient _httpClient;
	private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	public AccountPhoneClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	{
		BaseUrl = baseUrl;
		_httpClient = httpClient;
	}

	private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
	{
		var settings = new Newtonsoft.Json.JsonSerializerSettings();
		UpdateJsonSerializerSettings(settings);
		return settings;
	}

	public string BaseUrl
	{
		get { return _baseUrl; }
		set
		{
			_baseUrl = value;
			if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
				_baseUrl += '/';
		}
	}

	protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

	static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
	partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<string> CreateTokenAsync(string phoneNumber)
	{
		return CreateTokenAsync(phoneNumber, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<string> CreateTokenAsync(string phoneNumber, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountPhone_CreateToken"
				urlBuilder_.Append("api/Account/AccountPhone_CreateToken");
				urlBuilder_.Append('?');
				if (phoneNumber != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("phoneNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(phoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<bool> ChangeAsync(string token, string newPhoneNumber)
	{
		return ChangeAsync(token, newPhoneNumber, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<bool> ChangeAsync(string token, string newPhoneNumber, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountPhone_Change"
				urlBuilder_.Append("api/Account/AccountPhone_Change");
				urlBuilder_.Append('?');
				if (token != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				if (newPhoneNumber != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("newPhoneNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newPhoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<bool> ConfirmedAsync()
	{
		return ConfirmedAsync(System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<bool> ConfirmedAsync(System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountPhone_Confirmed"
				urlBuilder_.Append("api/Account/AccountPhone_Confirmed");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	protected struct ObjectResponseResult<T>
	{
		public ObjectResponseResult(T responseObject, string responseText)
		{
			this.Object = responseObject;
			this.Text = responseText;
		}

		public T Object { get; }

		public string Text { get; }
	}

	public bool ReadResponseAsString { get; set; }

	protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
	{
		if (response == null || response.Content == null)
		{
			return new ObjectResponseResult<T>(default(T), string.Empty);
		}

		if (ReadResponseAsString)
		{
			var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
			try
			{
				var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
				return new ObjectResponseResult<T>(typedBody, responseText);
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
			}
		}
		else
		{
			try
			{
				using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
				using (var streamReader = new System.IO.StreamReader(responseStream))
				using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
				{
					var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
					var typedBody = serializer.Deserialize<T>(jsonTextReader);
					return new ObjectResponseResult<T>(typedBody, string.Empty);
				}
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
			}
		}
	}

	private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
	{
		if (value == null)
		{
			return "";
		}

		if (value is System.Enum)
		{
			var name = System.Enum.GetName(value.GetType(), value);
			if (name != null)
			{
				var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
				if (field != null)
				{
					var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
						as System.Runtime.Serialization.EnumMemberAttribute;
					if (attribute != null)
					{
						return attribute.Value != null ? attribute.Value : name;
					}
				}

				var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
				return converted == null ? string.Empty : converted;
			}
		}
		else if (value is bool)
		{
			return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
		}
		else if (value is byte[])
		{
			return System.Convert.ToBase64String((byte[])value);
		}
		else if (value is string[])
		{
			return string.Join(",", (string[])value);
		}
		else if (value.GetType().IsArray)
		{
			var valueArray = (System.Array)value;
			var valueTextArray = new string[valueArray.Length];
			for (var i = 0; i < valueArray.Length; i++)
			{
				valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
			}
			return string.Join(",", valueTextArray);
		}

		var result = System.Convert.ToString(value, cultureInfo);
		return result == null ? "" : result;
	}
}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AccountPasswordClient
{
#pragma warning disable 8618
	private string _baseUrl;
#pragma warning restore 8618

	private System.Net.Http.HttpClient _httpClient;
	private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	public AccountPasswordClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	{
		BaseUrl = baseUrl;
		_httpClient = httpClient;
	}

	private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
	{
		var settings = new Newtonsoft.Json.JsonSerializerSettings();
		UpdateJsonSerializerSettings(settings);
		return settings;
	}

	public string BaseUrl
	{
		get { return _baseUrl; }
		set
		{
			_baseUrl = value;
			if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
				_baseUrl += '/';
		}
	}

	protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

	static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
	partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
	partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<bool> ChangeAsync(string newPassword, string token)
	{
		return ChangeAsync(newPassword, token, System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<bool> ChangeAsync(string newPassword, string token, System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountPassword_Change"
				urlBuilder_.Append("api/Account/AccountPassword_Change");
				urlBuilder_.Append('?');
				if (newPassword != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("newPassword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newPassword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				if (token != null)
				{
					urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
				}
				urlBuilder_.Length--;

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual System.Threading.Tasks.Task<string> CreateTokenAsync()
	{
		return CreateTokenAsync(System.Threading.CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <returns>Success</returns>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async System.Threading.Tasks.Task<string> CreateTokenAsync(System.Threading.CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new System.Net.Http.HttpRequestMessage())
			{
				request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
				request_.Method = new System.Net.Http.HttpMethod("POST");
				request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

				var urlBuilder_ = new System.Text.StringBuilder();
				if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
				// Operation Path: "api/Account/AccountPassword_CreateToken"
				urlBuilder_.Append("api/Account/AccountPassword_CreateToken");

				PrepareRequest(client_, request_, urlBuilder_);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

				PrepareRequest(client_, request_, url_);

				var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
					foreach (var item_ in response_.Headers)
						headers_[item_.Key] = item_.Value;
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					ProcessResponse(client_, response_);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}
						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	protected struct ObjectResponseResult<T>
	{
		public ObjectResponseResult(T responseObject, string responseText)
		{
			this.Object = responseObject;
			this.Text = responseText;
		}

		public T Object { get; }

		public string Text { get; }
	}

	public bool ReadResponseAsString { get; set; }

	protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
	{
		if (response == null || response.Content == null)
		{
			return new ObjectResponseResult<T>(default(T), string.Empty);
		}

		if (ReadResponseAsString)
		{
			var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
			try
			{
				var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
				return new ObjectResponseResult<T>(typedBody, responseText);
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
			}
		}
		else
		{
			try
			{
				using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
				using (var streamReader = new System.IO.StreamReader(responseStream))
				using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
				{
					var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
					var typedBody = serializer.Deserialize<T>(jsonTextReader);
					return new ObjectResponseResult<T>(typedBody, string.Empty);
				}
			}
			catch (Newtonsoft.Json.JsonException exception)
			{
				var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
			}
		}
	}

	private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
	{
		if (value == null)
		{
			return "";
		}

		if (value is System.Enum)
		{
			var name = System.Enum.GetName(value.GetType(), value);
			if (name != null)
			{
				var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
				if (field != null)
				{
					var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
						as System.Runtime.Serialization.EnumMemberAttribute;
					if (attribute != null)
					{
						return attribute.Value != null ? attribute.Value : name;
					}
				}

				var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
				return converted == null ? string.Empty : converted;
			}
		}
		else if (value is bool)
		{
			return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
		}
		else if (value is byte[])
		{
			return System.Convert.ToBase64String((byte[])value);
		}
		else if (value is string[])
		{
			return string.Join(",", (string[])value);
		}
		else if (value.GetType().IsArray)
		{
			var valueArray = (System.Array)value;
			var valueTextArray = new string[valueArray.Length];
			for (var i = 0; i < valueArray.Length; i++)
			{
				valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
			}
			return string.Join(",", valueTextArray);
		}

		var result = System.Convert.ToString(value, cultureInfo);
		return result == null ? "" : result;
	}
}





[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ApiException : System.Exception
{
	public int StatusCode { get; private set; }

	public string Response { get; private set; }

	public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

	public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
		: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
	{
		StatusCode = statusCode;
		Response = response;
		Headers = headers;
	}

	public override string ToString()
	{
		return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
	}
}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ApiException<TResult> : ApiException
{
	public TResult Result { get; private set; }

	public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
		: base(message, statusCode, response, headers, innerException)
	{
		Result = result;
	}
}



#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625